{"version":3,"sources":["compoments/Header.js","actions/actions.js","constant/constant.js","compoments/Modal.js","compoments/Grid.js","compoments/Home.js","compoments/pagenotfound.js","App.js","serviceWorker.js","store.js","reducers/reducer.js","index.js"],"names":["Header","to","activeStyle","color","exact","style","textAlign","fontWeight","getGridData","data","dispatch","a","type","payload","Overlay","props","useState","showData","setShowData","setData","modalData","useSelector","state","modalReducer","handleOk","modalClose","title","visible","showModal","onCancel","width","footer","key","onClick","direction","size","format","onChange","date","dateString","finalDate","replaceAll","activity_periods","forEach","element","start_time","toString","substring","trim","da","push","Promise","resolve","then","onDate","marginTop","columns","dataIndex","dataSource","pagination","Grid","useDispatch","setShowMOdal","gridData","dataReducer","render","text","record","id","block","filter","x","getModalData","Home","useEffect","axios","get","members","fetchData","className","border","marginLeft","PageNotFound","App","path","component","HomePage","Boolean","window","location","hostname","match","reducer","combineReducers","action","composeEnhancer","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f81fd128.chunk.js","sourcesContent":["import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\nconst Header = () => {\n  const activeStyle = { color: \"#808080\" };\n  return (\n    <div>\n      <NavLink to=\"/\" activeStyle={activeStyle} exact>\n        <h3 style={{ textAlign: \"center\", fontWeight: \"bold\" }}>\n          Work Order Assignment Tool\n        </h3>\n      </NavLink>\n    </div>\n  );\n};\n\nexport default Header;\n","import { GET_GRID_DATA, GET_MODAL_DATA } from \"../constant/constant\";\n\nconst getGridData = (data) => async (dispatch) => {\n  dispatch({ type: GET_GRID_DATA, payload: data });\n};\n\nconst getModalData = (data) => async (dispatch) => {\n  dispatch({ type: GET_MODAL_DATA, payload: data });\n};\n\nexport { getGridData, getModalData };\n","export const GET_GRID_DATA = \"GET_GRID_DATA\";\nexport const GET_MODAL_DATA = \"GET_MODAL_DATA\";\n","import React, { useState } from \"react\";\nimport { Modal, Button, Table } from \"antd\";\nimport { useSelector } from \"react-redux\";\nimport moment from \"moment\";\nimport { DatePicker, Space } from \"antd\";\n\nexport default function Overlay(props) {\n  const [showData, setShowData] = useState(false);\n  const [data, setData] = useState({});\n  const modalReducer = useSelector((state) => state.modalReducer);\n  const { modalData } = modalReducer;\n  const columns = [\n    {\n      title: \"Start Time\",\n      dataIndex: \"start_time\",\n      key: \"start_time\",\n    },\n    {\n      title: \"End Time\",\n      dataIndex: \"end_time\",\n      key: \"end_time\",\n    },\n  ];\n  const dateFormatList = [\"MMM-DD-YYYY\"];\n\n  const handleOk = () => {\n    props.modalClose();\n  };\n\n  const handleReset = () => {\n    setShowData(false);\n    setData({});\n  };\n  const onDate = (date, dateString) => {\n    let finalDate = dateString.replaceAll(\"-\", \" \");\n    let data = [];\n    modalData[0].activity_periods.forEach((element) => {\n      if (element.start_time.toString().substring(0, 11).trim() == finalDate) {\n        let da = element;\n        data.push(da);\n        Promise.resolve(setData(data)).then(function () {\n          setShowData(true);\n        });\n      }\n    });\n  };\n  return (\n    <>\n      <Modal\n        title=\"Activity Details\"\n        visible={props.showModal}\n        onCancel={handleOk}\n        width={1000}\n        footer={[\n          <Button key=\"back\" onClick={handleOk}>\n            Close\n          </Button>,\n        ]}\n      >\n        <p>\n          Selet the date for which you want the activity details to be displayed\n        </p>\n        <Space direction=\"vertical\" size={12}>\n          <DatePicker\n            format={dateFormatList}\n            onChange={(date, dateString) => onDate(date, dateString, 1)}\n          />\n          <Button key=\"back\" onClick={handleReset}>\n            Reset\n          </Button>\n          ,\n        </Space>\n        <div style={{ marginTop: \"30px\" }}>\n          {showData == true ? (\n            <Table columns={columns} dataSource={data} pagination={false} />\n          ) : (\n            <div style={{ color: \"red\" }}>\n              No Data Available for the selected date\n            </div>\n          )}\n        </div>\n      </Modal>\n    </>\n  );\n}\n","import React, { useState } from \"react\";\nimport { Table, Button, Space } from \"antd\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getModalData } from \"../actions/actions\";\nimport Modal from \"./Modal\";\nexport default function Grid(props) {\n  const dispatch = useDispatch();\n  const [showModal, setShowMOdal] = useState(false);\n  const dataReducer = useSelector((state) => state.dataReducer);\n  const { gridData } = dataReducer;\n  const columns = [\n    {\n      title: \"Id\",\n      dataIndex: \"id\",\n      key: \"id\",\n    },\n\n    {\n      title: \"Name\",\n      dataIndex: \"real_name\",\n      key: \"real_name\",\n    },\n    {\n      title: \"Time Zone\",\n      dataIndex: \"tz\",\n      key: \"tz\",\n    },\n    {\n      title: \"Action\",\n      key: \"action\",\n\n      render: (text, record) => (\n        <Space size=\"middle\">\n          <Button onClick={() => onClick(record.id)} block>\n            View Activity\n          </Button>\n        </Space>\n      ),\n    },\n  ];\n\n  const modalClose =() => {\n    setShowMOdal(false)\n  }\n  const onClick = (id) => {\n    if (id != null) {\n      let data = gridData.filter((x) => x.id === id);\n      Promise.resolve(dispatch(getModalData(data))).then(function () {\n        setShowMOdal(true);\n      });\n    }\n  };\n  return (\n    <div>\n      <Table columns={columns} dataSource={gridData} pagination={false} />\n      {showModal && <Modal showModal={showModal}  modalClose={modalClose}/>}\n    </div>\n  );\n}\n","import React, { useEffect } from \"react\";\nimport Grid from \"./Grid\";\nimport axios from \"axios\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getGridData } from \"../actions/actions\";\nexport default function Home(props) {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    const fetchData = async () => {\n      const { data } = await axios.get(\"./data.json\");\n      dispatch(getGridData(data.members));\n    };\n    fetchData();\n  }, []);\n\n  return (\n    <div\n      className=\"col-md-9\"\n      style={{ border: \"2px solid grey\", marginLeft: \"15%\", marginTop: \"30px\" }}\n    >\n      <Grid />\n    </div>\n  );\n}\n","import React from \"react\";\n\nconst PageNotFound = () => <h1>Oops! Page not found.</h1>;\n\nexport default PageNotFound;","import React from \"react\";\nimport Header from \"./compoments/Header\";\nimport {Switch , Route} from \"react-router-dom\"\nimport HomePage from \"./compoments/Home\"\nimport PageNotFound from \"./compoments/pagenotfound\"\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Switch>\n      <Route path=\"/\" exact={true} component={HomePage} />\n      <Route component={PageNotFound} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createStore, combineReducers, compose, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { dataReducer, modalReducer } from \"./reducers/reducer\";\nconst initialState = {};\n\nconst reducer = combineReducers({\n  dataReducer: dataReducer,\n  modalReducer: modalReducer,\n});\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(\n  reducer,\n  initialState,\n  composeEnhancer(applyMiddleware(thunk))\n);\n\nexport default store;\n","import { GET_GRID_DATA, GET_MODAL_DATA } from \"../constant/constant\";\n\n\nfunction dataReducer(state = { gridData: [] }, action) {\n  switch (action.type) {\n    case GET_GRID_DATA:\n      return {\n        ...state,\n        gridData: action.payload,\n      };\n\n    default:\n      return state;\n  }\n}\n\nfunction modalReducer(state = { modalData: [] }, action) {\n  switch (action.type) {\n    case GET_MODAL_DATA:\n      return {\n        ...state,\n        modalData: action.payload\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport { dataReducer , modalReducer };\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport {HashRouter as Router } from \"react-router-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nReactDOM.render(\n  <Provider store={store}>\n  <Router>\n    <App />\n  </Router>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}